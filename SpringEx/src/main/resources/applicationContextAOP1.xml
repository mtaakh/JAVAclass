<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">
<!-- AOP를 사용하기 위해서 xmls:aop 네임스페이스를 추가함 -->

	<!-- 공통기능을 수행할 클래스 지정 -->
	<bean id="commonAop" class="ex04AOP01.CommonAop" />
	
	<!-- AOP 설정 -->
	<aop:config>
		<!-- 공통기능 설정: 빈으로 생성된 commonAop를 참조, 아이디는 logger로 지정 -->
		<aop:aspect id="logger" ref="commonAop">
			<!-- pointcut 의 범위는 ex04AOP01패키지의 모든 클래스의 메소드에 공통기능을 저용함 -->
			<aop:pointcut expression="within(ex04AOP01.*)" id="publicMethod" />
			
			<!-- Advice는 around타입을 이용하고 그때 logViewAOP 메소드를 공통기능으로 사용함 -->
			<aop:around pointcut-ref="publicMethod" method="logViewAOP" />
		</aop:aspect>
	</aop:config>
<!-- 
Advice 종류
aop:before : 메소드 실행전에 advice 실행
aop:after-returning : 정상적으로 메소드 실행후 advice 실행 
aop:after-throwing : 메소드 실행중 예외 발생시 advice 실행
aop:after : 메소드 실행중 exception 발생과 상관없이 advice 실행
aop:around : 메소드 실행정/후 및 exception 발생시 advice 실행(사용빈도 높음)
 -->
	
	<!-- 빈 생성 -->
	<bean id="student" class="ex04AOP01.Student">
		<property name="name" value="이순신" />
		<property name="age" value="99" />
		<property name="gradeNum" value="1" />
		<property name="classNum" value="1" />
	</bean>
	
	<bean id="worker" class="ex04AOP01.Worker">
		<property name="name">
			<value>김유신</value>
		</property>
		<property name="age">
			<value>100</value>
		</property>
		<property name="job">
			<value>개발자</value> 
		</property>
		
	</bean>

</beans>
